package core;

import interfaces.I2CthroughPin;

import java.io.IOException;

import com.pi4j.io.gpio.GpioController;
import com.pi4j.io.gpio.GpioFactory;
import com.pi4j.io.gpio.GpioPinDigitalMultipurpose;
import com.pi4j.io.gpio.PinMode;
import com.pi4j.io.gpio.PinPullResistance;
import com.pi4j.io.gpio.RaspiPin;
import com.pi4j.io.i2c.I2CBus;
import com.pi4j.io.i2c.I2CFactory;

import control.MainControl;
import database.Device;
import database.Devices;
import database.Expanders;
import devices.HumiditySensor;

public final class main {
    private static I2CthroughPin i2cExpanders;
    private static I2CthroughPin i2cKeypads;
    private static I2CthroughPin i2cHumiditySensor;
    private static I2CthroughPin i2cADconverter;
    private static Device	device;

    /**
     * @param args
     * @throws IOException
     * @throws InterruptedException
     */
    public static void main(String[] args) throws IOException,
	    InterruptedException {

	// get I2C bus instance
	final I2CBus bus = I2CFactory.getInstance(I2CBus.BUS_1);
	final GpioController gpio = GpioFactory.getInstance();

	// Define I2C devices
	i2cKeypads = new I2CthroughPin(gpio, RaspiPin.GPIO_02, RaspiPin.GPIO_03);
	i2cExpanders = new I2CthroughPin(gpio, RaspiPin.GPIO_00,
		RaspiPin.GPIO_07);
	i2cHumiditySensor = new I2CthroughPin(gpio, RaspiPin.GPIO_12,
		RaspiPin.GPIO_13);

	GpioPinDigitalMultipurpose reset_pin = gpio
		.provisionDigitalMultipurposePin(RaspiPin.GPIO_15,
			PinMode.DIGITAL_OUTPUT, PinPullResistance.PULL_UP);

	// Declaration of instance
	// final SetVariables setVariables = new SetVariables();
	setVariables();
	final Thread control = new Thread(new MainControl(i2cExpanders,
		i2cKeypads));
	final Thread alarm = new Thread();

	//setVariables();

	HumiditySensor humiditySensor = new HumiditySensor(i2cHumiditySensor,
		"5V");
	for (int i = 0; i < 0; i++) {
	    humiditySensor.readTemperatureAndHumidity();
	}

	// Start of Threads
	control.start();
	alarm.start();

	for (;;) {
	    reset_pin.high();
	    Thread.sleep(50);
	    reset_pin.low();
	    Thread.sleep(10000);
	}
    }

    private static void setVariables() {
	// Expanders
	Expanders.addAddressInputExpanders(1);
	Expanders.addAddressOutputExpanders(0);

	// Keypad
	device = new Device("Keypad - dooor", "0", false);
	Devices.addKeypad(device);

	// Light
	device = new Device("Light - dooor", "0_0", true);
	Devices.addLight(device);

	device = new Device("Light - rear", "0_1", true);
	Devices.addLight(device);

	device = new Device("Light - show", "0_2", false);
	Devices.addLight(device);

	device = new Device("Light - out table", "0_3", false);
	Devices.addLight(device);

	// Heater
	device = new Device("Electric heater", "0_4", false);
	Devices.setHeater(device);

	// Alarm - siren
	device = new Device("Alarm - siren", "0_5", true);
	Devices.addSirens(device);

	// Alarm - detector - move
	device = new Device("Door", "1_0", 30000, true);
	Devices.addMoveDetector(device);

	device = new Device("Rear", "1_2", 30000, true);
	Devices.addMoveDetector(device);

	device = new Device("Corridor", "1_5", 0, true);
	Devices.addMoveDetector(device);

	// Alarm - detector - sound
	device = new Device("Rear", "1_3", 0, true);
	Devices.addSoundDetector(device);

	device = new Device("Corridor", "1_6", 0, true);
	Devices.addSoundDetector(device);

	// Alarm - detector - TMP
	device = new Device("Door", "1_1", 0, true);
	Devices.addTmpDetector(device);

	device = new Device("Rear", "1_4", 0, true);
	Devices.addTmpDetector(device);

	device = new Device("Corridor", "1_7", 0, true);
	Devices.addTmpDetector(device);

	device = new Device("Siren", "1_9", 0, true);
	Devices.addTmpDetector(device);

	device = new Device("Backup accumulator", "1_10", 0, true);
	Devices.addTmpDetector(device);

	device = new Device("Fire", "1_12", 0, true);
	Devices.addTmpDetector(device);

	// Alarm - magnetic
	device = new Device("Door - rear", "1_8", 0, true);
	Devices.addMagneticDetector(device);

	// Fire detector
	device = new Device("Fire", "1_11", 0, true);
	Devices.addFireDetector(device);

    }
}

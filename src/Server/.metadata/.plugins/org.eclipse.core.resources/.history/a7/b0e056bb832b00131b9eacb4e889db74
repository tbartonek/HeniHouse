package devices;

import interfaces.I2CthroughPin;

public class i2cBitExpander {

    private int	   basicExpanderAddress = 64;
    private int	   addressDevice;
    private I2CthroughPin i2c;
    private boolean       portAoutput;		 // true = port A is
							// output, false = port
							// A is input
    private boolean       portBoutput;		 // true = port B is
							// output, false = port
							// B is input

    private boolean       portA_0_High	 = false; // false = L = 0V, true
							// = H
    private boolean       portA_1_High	 = false; // same ...
    private boolean       portA_2_High	 = false;
    private boolean       portA_3_High	 = false;
    private boolean       portA_4_High	 = false;
    private boolean       portA_5_High	 = false;
    private boolean       portA_6_High	 = false;
    private boolean       portA_7_High	 = false;

    private boolean       portB_0_High	 = false;
    private boolean       portB_1_High	 = false;
    private boolean       portB_2_High	 = false;
    private boolean       portB_3_High	 = false;
    private boolean       portB_4_High	 = false;
    private boolean       portB_5_High	 = false;
    private boolean       portB_6_High	 = false;
    private boolean       portB_7_High	 = false;

    public i2cBitExpander(I2CthroughPin i2c, int addressDevice,
	    boolean portAoutput1, boolean portBoutput1)
	    throws InterruptedException {
	this.i2c = i2c;
	this.addressDevice = addressDevice;
	System.out.println("Start activation expander with address "
		+ addressDevice + ".");
	if (portAoutput = portAoutput1) {
	    setRegister(0, 0);
	} else {
	    setRegister(0, 255);
	    setRegister(2, 255); // change logical polarity on portA
	    setRegister(12, 255);
	} // true = output, value = 0; false = input, pull-up resistor enable
	if (portBoutput = portBoutput1) {
	    setRegister(1, 0);
	} else {
	    setRegister(1, 255);
	    setRegister(3, 255); // change logical polarity on portB
	    setRegister(13, 255);
	} // true = output, value = 0; false = input, pull-up resistor enable
	setRegister(8, 42); // set register INTCONA
	setRegister(9, 42); // set register INTCONB
	System.out.println("Expander with address " + addressDevice
		+ " is activated.");
    }

    private void setRegister(int addressRegister, int data) {
	try {
	    i2c.start();
	    i2c.write(basicExpanderAddress + (addressDevice << 1));
	    i2c.write(addressRegister); // register
	    i2c.write(data);
	    i2c.stop();

	} catch (InterruptedException e) {
	    System.out
		    .println("Error in write register to device with addess: "
			    + (basicExpanderAddress + addressDevice));
	    // e.printStackTrace();
	}
    }

    private int readRegister(int addressRegister) {
	int data = 0;
	try {
	    i2c.start();
	    i2c.write(basicExpanderAddress + (addressDevice << 1));
	    i2c.write(addressRegister); // register
	    i2c.stop();

	    i2c.start();
	    i2c.write(basicExpanderAddress + (addressDevice << 1) + 1);
	    data = i2c.read(true);
	    i2c.stop();

	} catch (InterruptedException e) {
	    // TODO Auto-generated catch block
	    System.out
		    .println("Error in read register from device with addess: "
			    + (basicExpanderAddress + addressDevice));
	    // e.printStackTrace();
	}
	return data;
    }

    /**
     * Write data to device.
     * 
     * @param data
     */
    private void setPortA() {
	int data = 0;
	if (portAoutput) {
	    if (portA_0_High) data += 1;
	    if (portA_1_High) data += 2;
	    if (portA_2_High) data += 4;
	    if (portA_3_High) data += 8;
	    if (portA_4_High) data += 16;
	    if (portA_5_High) data += 32;
	    if (portA_6_High) data += 64;
	    if (portA_7_High) data += 128;

	    setRegister(18, data);
	} else {
	    System.out.println("Port A isn't output.");
	}

    }

    public void setPortA(int data) {
	if (portAoutput) {
	    setRegister(18, data);
	} else {
	    System.out.println("Port A isn't output.");
	}

    }

    /**
     * Read port A and return int data and set variables portA_?_High
     * 
     * @return int data
     */
    public int readPortA() {
	int data = 0;
	if (!portAoutput) {
	    data = readRegister(18);

	    portA_0_High = (data & (1)) != 0;
	    portA_1_High = (data & (1 << 1)) != 0;
	    portA_2_High = (data & (1 << 2)) != 0;
	    portA_3_High = (data & (1 << 3)) != 0;
	    portA_4_High = (data & (1 << 4)) != 0;
	    portA_5_High = (data & (1 << 5)) != 0;
	    portA_6_High = (data & (1 << 6)) != 0;
	    portA_7_High = (data & (1 << 7)) != 0;
	} else {
	    System.out.println("Port A is output.");
	}
	return data;
    }

    /**
     * Write data to device.
     */
    private void setPortB() {
	int data = 0;
	if (portBoutput) {
	    if (portB_0_High) data += 1;
	    if (portB_1_High) data += 2;
	    if (portB_2_High) data += 4;
	    if (portB_3_High) data += 8;
	    if (portB_4_High) data += 16;
	    if (portB_5_High) data += 32;
	    if (portB_6_High) data += 64;
	    if (portB_7_High) data += 128;

	    setRegister(19, data);
	} else {
	    System.out.println("Port B isn't output.");
	}
    }

    public void setPortB(int data) {
	if (portBoutput) {
	    setRegister(19, data);
	} else {
	    System.out.println("Port B isn't output.");
	}
    }

    /**
     * Read port B and return int data and set variables portB_?_High
     * 
     * @return int data
     */
    public int readPortB() {
	int data = 0;
	if (!portBoutput) {
	    data = readRegister(19);

	    portB_0_High = (data & (1)) != 0;
	    portB_1_High = (data & (1 << 1)) != 0;
	    portB_2_High = (data & (1 << 2)) != 0;
	    portB_3_High = (data & (1 << 3)) != 0;
	    portB_4_High = (data & (1 << 4)) != 0;
	    portB_5_High = (data & (1 << 5)) != 0;
	    portB_6_High = (data & (1 << 6)) != 0;
	    portB_7_High = (data & (1 << 7)) != 0;
	} else {
	    System.out.println("Port B is output.");
	}

	return data;
    }

    public void setPortApin0(boolean value) {
	portA_0_High = value;
	setPortA();
    }

    public void setPortApin1(boolean value) {
	portA_1_High = value;
	setPortA();
    }

    public void setPortApin2(boolean value) {
	portA_2_High = value;
	setPortA();
    }

    public void setPortApin3(boolean value) {
	portA_3_High = value;
	setPortA();
    }

    public void setPortApin4(boolean value) {
	portA_4_High = value;
	setPortA();
    }

    public void setPortApin5(boolean value) {
	portA_5_High = value;
	setPortA();
    }

    public void setPortApin6(boolean value) {
	portA_6_High = value;
	setPortA();
    }

    public void setPortApin7(boolean value) {
	portA_7_High = value;
	setPortA();
    }

    public void setPortBpin0(boolean value) {
	portB_0_High = value;
	setPortB();
    }

    public void setPortBpin1(boolean value) {
	portB_1_High = value;
	setPortB();
    }

    public void setPortBpin2(boolean value) {
	portB_2_High = value;
	setPortB();
    }

    public void setPortBpin3(boolean value) {
	portB_3_High = value;
	setPortB();
    }

    public void setPortBpin4(boolean value) {
	portB_4_High = value;
	setPortB();
    }

    public void setPortBpin5(boolean value) {
	portB_5_High = value;
	setPortB();
    }

    public void setPortBpin6(boolean value) {
	portB_6_High = value;
	setPortB();
    }

    public void setPortBpin7(boolean value) {
	portB_7_High = value;
	setPortB();
    }

    /**
     * Keypad is connect on Port B I2C Expander.
     */
    public void startExpanderAsKeypad() {
	setRegister(0, 240); // firts four bit are output, last four bit are
			     // input
	setRegister(12, 240); // firts four bit are output, last four bit are
			      // input
	setRegister(1, 0); // Port B is output
	setRegister(19, 0); // Set all bits of Port B on high
    }

    public void writeRowKeypad(int number) {
	setRegister(18, number);
	/*
	 * for (;;) { setRegister(19, 1); setRegister(19, 0); }
	 */
    }

    public int readColumnKeypad() {
	return readRegister(18) >> 4;
    }

    /**
     * Keypad used Port B as output pin for signaling - LED, buzzer, ...
     * 
     * @param data
     */
    public void setOutputKeypad(int data) {
	setRegister(19, data);
    }

}